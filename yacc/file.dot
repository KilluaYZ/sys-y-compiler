digraph tree {
	fontname = "Consolas"
	fontsize = 24
	node[shape = "box"]

	"CompUnit (0)(0)" -> "FuncDef (1)(0)";
	"FuncDef (1)(0)" -> "int (2)(0)";
	"FuncDef (1)(0)" -> "main (2)(0)";
	"FuncDef (1)(0)" -> "( (2)(0)";
	"FuncDef (1)(0)" -> ") (2)(0)";
	"FuncDef (1)(0)" -> "Block (2)(0)";
	"Block (2)(0)" -> "{ (3)(0)";
	"Block (2)(0)" -> "BlockItem (3)(0)";
	"Block (2)(0)" -> "BlockRepeat (3)(0)";
	"Block (2)(0)" -> "} (3)(0)";
	"BlockItem (3)(0)" -> "Stmt (4)(0)";
	"BlockRepeat (3)(0)" -> "BlockItem (4)(0)";
	"BlockRepeat (3)(0)" -> "BlockRepeat (4)(0)";
	"Stmt (4)(0)" -> "if (5)(0)";
	"Stmt (4)(0)" -> "( (5)(0)";
	"Stmt (4)(0)" -> "Cond (5)(0)";
	"Stmt (4)(0)" -> ") (5)(0)";
	"Stmt (4)(0)" -> "Stmt (5)(0)";
	"Stmt (4)(0)" -> "else (5)(0)";
	"Stmt (4)(0)" -> "Stmt (5)(1)";
	"BlockItem (4)(0)" -> "Stmt (5)(2)";
	"Cond (5)(0)" -> "LOrExp (6)(0)";
	"Stmt (5)(0)" -> "Block (6)(0)";
	"Stmt (5)(1)" -> "Block (6)(1)";
	"Stmt (5)(2)" -> "if (6)(0)";
	"Stmt (5)(2)" -> "( (6)(0)";
	"Stmt (5)(2)" -> "Cond (6)(0)";
	"Stmt (5)(2)" -> ") (6)(0)";
	"Stmt (5)(2)" -> "Stmt (6)(0)";
	"LOrExp (6)(0)" -> "LAndExp (7)(0)";
	"Block (6)(0)" -> "{ (7)(0)";
	"Block (6)(0)" -> "BlockItem (7)(0)";
	"Block (6)(0)" -> "BlockRepeat (7)(0)";
	"Block (6)(0)" -> "} (7)(0)";
	"Block (6)(1)" -> "{ (7)(1)";
	"Block (6)(1)" -> "BlockItem (7)(1)";
	"Block (6)(1)" -> "BlockRepeat (7)(1)";
	"Block (6)(1)" -> "} (7)(1)";
	"Cond (6)(0)" -> "LOrExp (7)(0)";
	"Stmt (6)(0)" -> "Block (7)(0)";
	"LAndExp (7)(0)" -> "EqExp (8)(0)";
	"BlockItem (7)(0)" -> "Stmt (8)(0)";
	"BlockItem (7)(1)" -> "Stmt (8)(1)";
	"LOrExp (7)(0)" -> "LAndExp (8)(0)";
	"Block (7)(0)" -> "{ (8)(0)";
	"Block (7)(0)" -> "BlockItem (8)(0)";
	"Block (7)(0)" -> "BlockRepeat (8)(0)";
	"Block (7)(0)" -> "} (8)(0)";
	"EqExp (8)(0)" -> "EqExp (9)(0)";
	"EqExp (8)(0)" -> "== (9)(0)";
	"EqExp (8)(0)" -> "RelExp (9)(0)";
	"Stmt (8)(0)" -> "LVal (9)(0)";
	"Stmt (8)(0)" -> "= (9)(0)";
	"Stmt (8)(0)" -> "Exp (9)(0)";
	"Stmt (8)(0)" -> "; (9)(0)";
	"Stmt (8)(1)" -> "LVal (9)(1)";
	"Stmt (8)(1)" -> "= (9)(1)";
	"Stmt (8)(1)" -> "Exp (9)(1)";
	"Stmt (8)(1)" -> "; (9)(1)";
	"LAndExp (8)(0)" -> "EqExp (9)(1)";
	"BlockItem (8)(0)" -> "Stmt (9)(0)";
	"EqExp (9)(0)" -> "RelExp (10)(0)";
	"RelExp (9)(0)" -> "AddExp (10)(0)";
	"LVal (9)(0)" -> "a (10)(0)";
	"Exp (9)(0)" -> "AddExp (10)(1)";
	"LVal (9)(1)" -> "a (10)(1)";
	"Exp (9)(1)" -> "AddExp (10)(2)";
	"EqExp (9)(1)" -> "EqExp (10)(0)";
	"EqExp (9)(1)" -> "== (10)(0)";
	"EqExp (9)(1)" -> "RelExp (10)(1)";
	"Stmt (9)(0)" -> "LVal (10)(0)";
	"Stmt (9)(0)" -> "= (10)(0)";
	"Stmt (9)(0)" -> "Exp (10)(0)";
	"Stmt (9)(0)" -> "; (10)(0)";
	"RelExp (10)(0)" -> "AddExp (11)(0)";
	"AddExp (10)(0)" -> "MulExp (11)(0)";
	"AddExp (10)(1)" -> "MulExp (11)(1)";
	"AddExp (10)(2)" -> "MulExp (11)(2)";
	"EqExp (10)(0)" -> "RelExp (11)(0)";
	"RelExp (10)(1)" -> "AddExp (11)(1)";
	"LVal (10)(0)" -> "a (11)(0)";
	"Exp (10)(0)" -> "AddExp (11)(2)";
	"AddExp (11)(0)" -> "MulExp (12)(0)";
	"MulExp (11)(0)" -> "UnaryExp (12)(0)";
	"MulExp (11)(1)" -> "UnaryExp (12)(1)";
	"MulExp (11)(2)" -> "UnaryExp (12)(2)";
	"RelExp (11)(0)" -> "AddExp (12)(0)";
	"AddExp (11)(1)" -> "MulExp (12)(1)";
	"AddExp (11)(2)" -> "MulExp (12)(2)";
	"MulExp (12)(0)" -> "UnaryExp (13)(0)";
	"UnaryExp (12)(0)" -> "PrimaryExp (13)(0)";
	"UnaryExp (12)(1)" -> "PrimaryExp (13)(1)";
	"UnaryExp (12)(2)" -> "PrimaryExp (13)(2)";
	"AddExp (12)(0)" -> "MulExp (13)(0)";
	"MulExp (12)(1)" -> "UnaryExp (13)(1)";
	"MulExp (12)(2)" -> "UnaryExp (13)(2)";
	"UnaryExp (13)(0)" -> "PrimaryExp (14)(0)";
	"PrimaryExp (13)(0)" -> "Number (14)(0)";
	"PrimaryExp (13)(1)" -> "Number (14)(1)";
	"PrimaryExp (13)(2)" -> "Number (14)(2)";
	"MulExp (13)(0)" -> "UnaryExp (14)(0)";
	"UnaryExp (13)(1)" -> "PrimaryExp (14)(1)";
	"UnaryExp (13)(2)" -> "PrimaryExp (14)(2)";
	"PrimaryExp (14)(0)" -> "LVal (15)(0)";
	"Number (14)(0)" -> "10 (15)(0)";
	"Number (14)(1)" -> "100 (15)(0)";
	"Number (14)(2)" -> "20 (15)(0)";
	"UnaryExp (14)(0)" -> "PrimaryExp (15)(0)";
	"PrimaryExp (14)(1)" -> "Number (15)(0)";
	"PrimaryExp (14)(2)" -> "Number (15)(1)";
	"LVal (15)(0)" -> "a (16)(0)";
	"PrimaryExp (15)(0)" -> "LVal (16)(0)";
	"Number (15)(0)" -> "29 (16)(0)";
	"Number (15)(1)" -> "23 (16)(0)";
	"LVal (16)(0)" -> "a (17)(0)";
}